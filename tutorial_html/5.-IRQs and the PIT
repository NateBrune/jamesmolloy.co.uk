=IRQs and the PIT=In this chapter we're going to be learning about interrupt requests(IRQs) and the programmable interval timer (PIT).==Interrupt requests (theory)==There are several methods for communicating with external devices. Twoof the most useful and popular are polling and interrupting.;Polling:Spin in a loop, occasionally checking if the device is ready.;Interrupts:Do lots of useful stuff. When the device is ready it will cause a CPU interrupt, causing your handler to be run.As can probably be gleaned from my biased descriptions, interrupting isconsidered better for many situations. Polling has lots of uses - some CPUs may not have aninterrupt mechanism, or you may have many devices, or maybe you justneed to check so infrequently that it's not worth the hassle ofinterrupts. Any rate, interrupts are a very useful method of hardwarecommunication. They are used by the keyboard when keys are pressed,and also by the programmable interval timer (PIT).The low-level concepts behind external interrupts are not verycomplex. All devices that are interrupt-capable have a line connectingthem to the PIC (programmable interrupt controller). The PIC is theonly device that is directly connected to the CPU's interrupt pin. Itis used as a multiplexer, and has the ability to prioritise betweeninterrupting devices. It is, essentially, a glorified 8-1multiplexer. At some point, someone somewhere realised that 8 IRQlines just wasn't enough, and they daisy-chained another 8-1 PICbeside the original. So in all modern PCs, you have 2 PICs, the masterand the slave, serving a total of 15 interruptable devices (one lineis used to signal the slave PIC).The other clever thing about the PIC is that you can change theinterrupt number it delivers for each IRQ line. This is referred to as''remapping the PIC'' and is actually extremely useful. When thecomputer boots, the default interrupt mappings are:* IRQ 0..7 - INT 0x8..0xF* IRQ 8..15 - INT 0x70..0x77This causes us somewhat of a problem. The master's IRQ mappings(0x8-0xF) conflict with the interrupt numbers used by the CPU tosignal exceptions and faults (see last [[chapter|4.]]). The normalthing to do is to remap the PICs so that IRQs 0..15 correspond to ISRs32..47 (31 being the last CPU-used ISR).==Interrupt requests (practical)==The PICs are communicated with via the I/O bus. Each has a commandport and a data port:* Master - command: 0x20, data: 0x21* Slave - command: 0xA0, data: 0xA1The code for remapping the PICs is the most difficult andobfusticated. To remap them, you have to do a full reinitialisation ofthem, which is why the code is so long. If you're interested in what'sactually happening, there is a nice description[[here|http://www.osdev.org/wiki/PIC]]. C static void init_idt() {  ...  // Remap the irq table.  outb(0x20, 0x11);  outb(0xA0, 0x11);  outb(0x21, 0x20);  outb(0xA1, 0x28);  outb(0x21, 0x04);  outb(0xA1, 0x02);  outb(0x21, 0x01);  outb(0xA1, 0x01);  outb(0x21, 0x0);  outb(0xA1, 0x0);  ...  idt_set_gate(32, (u32int)irq0, 0x08, 0x8E);  ...  idt_set_gate(47, (u32int)irq15, 0x08, 0x8E); }Notice that now we are also setting IDT gates for numbers 32-47, forour IRQ handlers. We must, therefore, also add stubs for these ininterrupt.s. Also, though, we need a new macro in interrupt.s - an IRQstub will have 2 numbers associated with it - it's IRQ number (0-15)and it's interrupt number (32-47): Asm ; This macro creates a stub for an IRQ - the first parameter is ; the IRQ number, the second is the ISR number it is remapped to. %macro IRQ 2  global irq%1  irq%1:   cli   push byte 0   push byte %2   jmp irq_common_stub %endmacro  ... IRQ  0,  32 IRQ  1,  33 ... IRQ 15,  47We also have a new common stub - ''irq_common_stub''. This is becauseIRQs behave subtly differently - before you return from an IRQhandler, you must inform the PIC that you have finished, so it candispatch the next (if there is one waiting). This is known as an EOI(end of interrupt). There is a slight complication though. If themaster PIC sent the IRQ (number 0-7), we must send an EOI to themaster (obviously). If the ''slave'' sent the IRQ (8-15), we must sendan EOI to both the master ''and'' the slave (because of thedaisy-chaining of the two).First our asm common stub. It is almost identical to''isr_common_stub''. Asm ; In isr.c [EXTERN irq_handler]  ; This is our common IRQ stub. It saves the processor state, sets ; up for kernel mode segments, calls the C-level fault handler, ; and finally restores the stack frame.  irq_common_stub:  pusha          ; Pushes edi,esi,ebp,esp,ebx,edx,ecx,eax   mov ax, ds        ; Lower 16-bits of eax = ds.  push eax         ; save the data segment descriptor   mov ax, 0x10 ; load the kernel data segment descriptor  mov ds, ax  mov es, ax  mov fs, ax  mov gs, ax   call irq_handler   pop ebx    ; reload the original data segment descriptor  mov ds, bx  mov es, bx  mov fs, bx  mov gs, bx   popa           ; Pops edi,esi,ebp...  add esp, 8   ; Cleans up the pushed error code and pushed ISR number  sti  iret      ; pops 5 things at once: CS, EIP, EFLAGS, SS, and ESPNow the C code (goes in isr.c): C // This gets called from our ASM interrupt handler stub. void irq_handler(registers_t regs) {  // Send an EOI (end of interrupt) signal to the PICs.  // If this interrupt involved the slave.  if (regs.int_no >= 40)  {    // Send reset signal to slave.    outb(0xA0, 0x20);  }  // Send reset signal to master. (As well as slave, if necessary).  outb(0x20, 0x20);   if (interrupt_handlers[regs.int_no] != 0)  {    isr_t handler = interrupt_handlers[regs.int_no];    handler(regs);  } }This is fairly straightforward - if the IRQ was > 7 (interrupt number> 40), we send a reset signal to the slave. In either case, we sendone to the master also.You may also notice that I have added a small custom handlermechanism, allowing you to register custom interrupt handlers. Thiscan be very useful as an abstraction technique, and will neaten up ourcode nicely.Some other declarations are needed:===isr.h=== C // A few defines to make life a little easier #define IRQ0 32 ... #define IRQ15 47  // Enables registration of callbacks for interrupts or IRQs. // For IRQs, to ease confusion, use the #defines above as the // first parameter. typedef void (*isr_t)(registers_t); void register_interrupt_handler(u8int n, isr_t handler);===isr.c=== C isr_t interrupt_handlers[256];  void register_interrupt_handler(u8int n, isr_t handler) {  interrupt_handlers[n] = handler; }And there we go! We can now handle interrupt requests from externaldevices, and dispatch them to custom handlers. Now all we need is someinterrupt requests to handle!==The PIT (theory)==The programmable interval timer is a chip connected to IRQ0. It caninterrupt the CPU at a user-defined rate (between 18.2Hz and 1.1931MHz). The PIT is the primary method used for implementing a systemclock and the only method available for implementing multitasking(switch processes on interrupt).The PIT has an internal clock which oscillates at approximately1.1931MHz. This clock signal is fed through a [[frequencydivider|http://en.wikipedia.org/wiki/Frequency_divider]], to modulatethe final output frequency. It has 3 channels, each with it's ownfrequency divider.* Channel 0 is the most useful. It's output is connected to IRQ0.* Channel 1 is very un-useful and on modern hardware is no longer implemented. It used to control refresh rates for [[DRAM|http://en.wikipedia.org/wiki/DRAM]].* Channel 2 controls the PC speaker.Channel 0 is the only one of use to us at the moment.OK, so we wantto set the PIT up so it interrupts us at regular intervals, atfrequency f. I generally set ''f'' to be about 100Hz (once every10 milliseconds), but feel free to set it to whatever you like. To dothis, we send the PIT a 'divisor'. This is the number that it shoulddivide it's input frequency (1.9131MHz) by. It's dead easy to workout: divisor = 1193180 Hz / frequency (in Hz)Also worthy of note is that the PIT has 4 registers in I/O space -0x40-0x42 are the data ports for channels 0-2 respectively, and 0x43is the command port.==The PIT (practical)==We'll need a few new files. Timer.h has only a declaration in it: C // timer.h -- Defines the interface for all PIT-related functions. //      Written for JamesM's kernel development tutorials.  #ifndef TIMER_H #define TIMER_H  #include "common.h"  void init_timer(u32int frequency);  #endifAnd timer.c doesn't have much in either: C // timer.c -- Initialises the PIT, and handles clock updates. //      Written for JamesM's kernel development tutorials.  #include "timer.h" #include "isr.h" #include "monitor.h"  u32int tick = 0;  static void timer_callback(registers_t regs) {  tick++;  monitor_write("Tick: ");  monitor_write_dec(tick);  monitor_write("\n"); }  void init_timer(u32int frequency) {  // Firstly, register our timer callback.  register_interrupt_handler(IRQ0, &timer_callback);   // The value we send to the PIT is the value to divide it's input clock  // (1193180 Hz) by, to get our required frequency. Important to note is  // that the divisor must be small enough to fit into 16-bits.  u32int divisor = 1193180 / frequency;   // Send the command byte.  outb(0x43, 0x36);   // Divisor has to be sent byte-wise, so split here into upper/lower bytes.  u8int l = (u8int)(divisor & 0xFF);  u8int h = (u8int)( (divisor>>8) & 0xFF );   // Send the frequency divisor.  outb(0x40, l);  outb(0x40, h); }OK, lets go through this code. Firstly, we have our ''init_timer''function. This tells our interrupt mechanism that we want to handleIRQ0 with the function ''timer_callback''. This will be calledwhenever a timer interrupt is recieved. We then calculate the divisorto be sent to the PIT (see theory above). Then, we send a command byteto the PIT's command port. This byte (0x36) sets the PIT to repeatingmode (so that when the divisor counter reaches zero it's automaticallyrefreshed) and tells it we want to set the divisor value.We then send the divisor value. Note that it must be sent as twoseperate bytes, not as one 16-bit value.When this is done, all we have to do is edit our Makefile, add oneline to main.c C init_timer(50); // Initialise timer to 50Hz{{/images/irqs_and_the_pit_bochs.png|A clock!}},compile, and run! Youshould get output like that on the right. Note however that bochs doesnot accurately emulate the timer chip, so although your code will runat the correct speed on a real machine, it probably won't in bochs!